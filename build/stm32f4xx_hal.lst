ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_hal.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_MspInit:
  27              	.LFB125:
  28              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @file    stm32f4xx_hal.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @version V1.7.1
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @date    14-April-2017
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief   HAL module driver.
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *          This is the common part of the HAL initialization
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   @verbatim
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ==============================================================================
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                      ##### How to use this driver #####
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ==============================================================================
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     The HAL contains two APIs' categories: 
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****          (+) Common HAL APIs
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****          (+) Services HAL APIs
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   @endverbatim
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ******************************************************************************
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @attention
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * are permitted provided that the following conditions are met:
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 2


  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      this list of conditions and the following disclaimer.
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      and/or other materials provided with the distribution.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      without specific prior written permission.
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   ******************************************************************************
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */ 
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #include "stm32f4xx_hal.h"
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @addtogroup STM32F4xx_HAL_Driver
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL HAL
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief HAL module driver.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private define ------------------------------------------------------------*/
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @addtogroup HAL_Private_Constants
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief STM32F4xx HAL Driver version number V1.7.1
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_MAIN   (0x01U) /*!< [31:24] main version */
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_SUB1   (0x07U) /*!< [23:16] sub1 version */
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_SUB2   (0x01U) /*!< [15:8]  sub2 version */
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION_RC     (0x00U) /*!< [7:0]  release candidate */ 
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define __STM32F4xx_HAL_VERSION         ((__STM32F4xx_HAL_VERSION_MAIN << 24U)\
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         |(__STM32F4xx_HAL_VERSION_SUB1 << 16U)\
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         |(__STM32F4xx_HAL_VERSION_SUB2 << 8U )\
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         |(__STM32F4xx_HAL_VERSION_RC))
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                                         
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define IDCODE_DEVID_MASK    0x00000FFFU
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ---  MEMRMP Register ---*/ 
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Alias word address of UFB_MODE bit */ 
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 3


  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define MEMRMP_OFFSET             SYSCFG_OFFSET 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define UFB_MODE_BIT_NUMBER       POSITION_VAL(SYSCFG_MEMRMP_UFB_MODE)
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define UFB_MODE_BB               (uint32_t)(PERIPH_BB_BASE + (MEMRMP_OFFSET * 32U) + (UFB_MODE_BIT
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ---  CMPCR Register ---*/ 
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Alias word address of CMP_PD bit */ 
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20U) 
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define CMP_PD_BIT_NUMBER         POSITION_VAL(SYSCFG_CMPCR_CMP_PD)
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define CMPCR_CMP_PD_BB           (uint32_t)(PERIPH_BB_BASE + (CMPCR_OFFSET * 32U) + (CMP_PD_BIT_NU
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* ---  MCHDLYCR Register ---*/ 
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Alias word address of BSCKSEL bit */ 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define MCHDLYCR_OFFSET            (SYSCFG_OFFSET + 0x30U) 
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define BSCKSEL_BIT_NUMBER         POSITION_VAL(SYSCFG_MCHDLYCR_BSCKSEL)
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #define MCHDLYCR_BSCKSEL_BB        (uint32_t)(PERIPH_BB_BASE + (MCHDLYCR_OFFSET * 32U) + (BSCKSEL_B
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @}
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private macro -------------------------------------------------------------*/
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private variables ---------------------------------------------------------*/
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @addtogroup HAL_Private_Variables
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __IO uint32_t uwTick;
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @}
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /* Private functions ---------------------------------------------------------*/
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @verbatim    
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****               ##### Initialization and de-initialization functions #####
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]  This section provides functions allowing to:
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Initializes the Flash interface the NVIC allocation and initial clock 
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****           configuration. It initializes the systick also when timeout is needed 
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****           and the backup domain when enabled.
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) de-Initializes common part of the HAL
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****           Tick interrupt priority. 
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              handled in milliseconds basis.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 4


 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             ISR process will be blocked. 
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak  
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @endverbatim
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first 
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         HAL function), it performs the following:
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Configure the Flash prefetch, instruction and Data caches.
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Set NVIC Group Priority to 4.
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file 
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *           "stm32f4xx_hal_msp.c" to do the global low level hardware initialization 
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *            
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         to have correct HAL operation.
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval HAL status
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Configure Flash prefetch, Instruction cache, Data cache */ 
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #if (INSTRUCTION_CACHE_ENABLE != 0U)
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #endif /* INSTRUCTION_CACHE_ENABLE */
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #if (DATA_CACHE_ENABLE != 0U)
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_DATA_CACHE_ENABLE();
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #endif /* DATA_CACHE_ENABLE */
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #if (PREFETCH_ENABLE != 0U)
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** #endif /* PREFETCH_ENABLE */
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Set Interrupt Group Priority */
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Init the low level hardware */
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspInit();
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Return function status */
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return HAL_OK;
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 5


 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  This function de-Initializes common part of the HAL and stops the systick.
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         This function is optional.   
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval HAL status
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Reset of all peripherals */
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* De-Init the low level hardware */
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspDeInit();
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Return function status */
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return HAL_OK;
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Initializes the MSP.
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_MspInit(void)
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  29              		.loc 1 236 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE125:
  38 0002 00BF     		.section	.text.HAL_MspDeInit,"ax",%progbits
  39              		.align	2
  40              		.weak	HAL_MspDeInit
  41              		.thumb
  42              		.thumb_func
  44              	HAL_MspDeInit:
  45              	.LFB126:
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    */
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  DeInitializes the MSP.
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 6


 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_MspDeInit(void)
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  46              		.loc 1 247 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51 0000 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE126:
  55 0002 00BF     		.section	.text.HAL_DeInit,"ax",%progbits
  56              		.align	2
  57              		.global	HAL_DeInit
  58              		.thumb
  59              		.thumb_func
  61              	HAL_DeInit:
  62              	.LFB124:
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  63              		.loc 1 207 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
  67              		.loc 1 207 0
  68 0000 10B5     		push	{r4, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 14, -4
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
  73              		.loc 1 209 0
  74 0002 094B     		ldr	r3, .L4
  75 0004 4FF0FF32 		mov	r2, #-1
  76 0008 1A62     		str	r2, [r3, #32]
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  77              		.loc 1 210 0
  78 000a 0024     		movs	r4, #0
  79 000c 1C62     		str	r4, [r3, #32]
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
  80              		.loc 1 212 0
  81 000e 5A62     		str	r2, [r3, #36]
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  82              		.loc 1 213 0
  83 0010 5C62     		str	r4, [r3, #36]
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
  84              		.loc 1 215 0
  85 0012 1A61     		str	r2, [r3, #16]
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
  86              		.loc 1 216 0
  87 0014 1C61     		str	r4, [r3, #16]
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
  88              		.loc 1 218 0
  89 0016 5A61     		str	r2, [r3, #20]
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
  90              		.loc 1 219 0
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 7


  91 0018 5C61     		str	r4, [r3, #20]
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
  92              		.loc 1 221 0
  93 001a 9A61     		str	r2, [r3, #24]
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
  94              		.loc 1 222 0
  95 001c 9C61     		str	r4, [r3, #24]
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspDeInit();
  96              		.loc 1 225 0
  97 001e FFF7FEFF 		bl	HAL_MspDeInit
  98              	.LVL0:
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
  99              		.loc 1 229 0
 100 0022 2046     		mov	r0, r4
 101 0024 10BD     		pop	{r4, pc}
 102              	.L5:
 103 0026 00BF     		.align	2
 104              	.L4:
 105 0028 00380240 		.word	1073887232
 106              		.cfi_endproc
 107              	.LFE124:
 109              		.section	.text.HAL_InitTick,"ax",%progbits
 110              		.align	2
 111              		.weak	HAL_InitTick
 112              		.thumb
 113              		.thumb_func
 115              	HAL_InitTick:
 116              	.LFB127:
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    */ 
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief This function configures the source of the time base.
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        Tick interrupt priority.
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementation  in user file.
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval HAL status
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 117              		.loc 1 270 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL1:
 122 0000 10B5     		push	{r4, lr}
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 8


 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 4, -8
 126              		.cfi_offset 14, -4
 127 0002 0446     		mov	r4, r0
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_SYSTICK_Config(SystemCoreClock/1000U);
 128              		.loc 1 272 0
 129 0004 074B     		ldr	r3, .L7
 130 0006 1868     		ldr	r0, [r3]
 131              	.LVL2:
 132 0008 074B     		ldr	r3, .L7+4
 133 000a A3FB0020 		umull	r2, r0, r3, r0
 134 000e 8009     		lsrs	r0, r0, #6
 135 0010 FFF7FEFF 		bl	HAL_SYSTICK_Config
 136              	.LVL3:
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /*Configure the SysTick IRQ priority */
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 137              		.loc 1 275 0
 138 0014 4FF0FF30 		mov	r0, #-1
 139 0018 2146     		mov	r1, r4
 140 001a 0022     		movs	r2, #0
 141 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 142              	.LVL4:
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Return function status */
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return HAL_OK;
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 143              		.loc 1 279 0
 144 0020 0020     		movs	r0, #0
 145 0022 10BD     		pop	{r4, pc}
 146              	.LVL5:
 147              	.L8:
 148              		.align	2
 149              	.L7:
 150 0024 00000000 		.word	SystemCoreClock
 151 0028 D34D6210 		.word	274877907
 152              		.cfi_endproc
 153              	.LFE127:
 155              		.section	.text.HAL_Init,"ax",%progbits
 156              		.align	2
 157              		.global	HAL_Init
 158              		.thumb
 159              		.thumb_func
 161              	HAL_Init:
 162              	.LFB123:
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 163              		.loc 1 174 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 08B5     		push	{r3, lr}
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 3, -8
 171              		.cfi_offset 14, -4
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 9


 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 172              		.loc 1 177 0
 173 0002 0B4B     		ldr	r3, .L10
 174 0004 1A68     		ldr	r2, [r3]
 175 0006 42F40072 		orr	r2, r2, #512
 176 000a 1A60     		str	r2, [r3]
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    __HAL_FLASH_DATA_CACHE_ENABLE();
 177              		.loc 1 181 0
 178 000c 1A68     		ldr	r2, [r3]
 179 000e 42F48062 		orr	r2, r2, #1024
 180 0012 1A60     		str	r2, [r3]
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 181              		.loc 1 185 0
 182 0014 1A68     		ldr	r2, [r3]
 183 0016 42F48072 		orr	r2, r2, #256
 184 001a 1A60     		str	r2, [r3]
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 185              		.loc 1 189 0
 186 001c 0320     		movs	r0, #3
 187 001e FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 188              	.LVL6:
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 189              		.loc 1 192 0
 190 0022 0020     		movs	r0, #0
 191 0024 FFF7FEFF 		bl	HAL_InitTick
 192              	.LVL7:
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   HAL_MspInit();
 193              		.loc 1 195 0
 194 0028 FFF7FEFF 		bl	HAL_MspInit
 195              	.LVL8:
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 196              		.loc 1 199 0
 197 002c 0020     		movs	r0, #0
 198 002e 08BD     		pop	{r3, pc}
 199              	.L11:
 200              		.align	2
 201              	.L10:
 202 0030 003C0240 		.word	1073888256
 203              		.cfi_endproc
 204              	.LFE123:
 206              		.section	.text.HAL_IncTick,"ax",%progbits
 207              		.align	2
 208              		.weak	HAL_IncTick
 209              		.thumb
 210              		.thumb_func
 212              	HAL_IncTick:
 213              	.LFB128:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @}
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *  @brief    HAL Control functions
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  *
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @verbatim
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 10


 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****                       ##### HAL Control functions #####
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  ===============================================================================
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****     [..]  This section provides functions allowing to:
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Provide a tick value in millisecond
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Provide a blocking delay in millisecond
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Suspend the time base source interrupt
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Resume the time base source interrupt
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Get the HAL API driver version
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Get the device identifier
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Get the device revision identifier
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** @endverbatim
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @{
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        used as application time base.
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       in Systick ISR.
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  * @note This function is declared as __weak to be overwritten in case of other 
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *      implementations in user file.
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_IncTick(void)
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 214              		.loc 1 318 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   uwTick++;
 219              		.loc 1 319 0
 220 0000 024B     		ldr	r3, .L13
 221 0002 1A68     		ldr	r2, [r3]
 222 0004 0132     		adds	r2, r2, #1
 223 0006 1A60     		str	r2, [r3]
 224 0008 7047     		bx	lr
 225              	.L14:
 226 000a 00BF     		.align	2
 227              	.L13:
 228 000c 00000000 		.word	uwTick
 229              		.cfi_endproc
 230              	.LFE128:
 232              		.section	.text.HAL_GetTick,"ax",%progbits
 233              		.align	2
 234              		.weak	HAL_GetTick
 235              		.thumb
 236              		.thumb_func
 238              	HAL_GetTick:
 239              	.LFB129:
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 11


 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Provides a tick value in millisecond.
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval tick value
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 240              		.loc 1 329 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   return uwTick;
 245              		.loc 1 330 0
 246 0000 014B     		ldr	r3, .L16
 247 0002 1868     		ldr	r0, [r3]
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 248              		.loc 1 331 0
 249 0004 7047     		bx	lr
 250              	.L17:
 251 0006 00BF     		.align	2
 252              	.L16:
 253 0008 00000000 		.word	uwTick
 254              		.cfi_endproc
 255              	.LFE129:
 257              		.section	.text.HAL_Delay,"ax",%progbits
 258              		.align	2
 259              		.weak	HAL_Delay
 260              		.thumb
 261              		.thumb_func
 263              	HAL_Delay:
 264              	.LFB130:
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief This function provides minimum delay (in milliseconds) based 
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *        on variable incremented.
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is incremented.
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @param Delay: specifies the delay time length, in milliseconds.
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 265              		.loc 1 345 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              	.LVL9:
 270 0000 30B5     		push	{r4, r5, lr}
 271              	.LCFI3:
 272              		.cfi_def_cfa_offset 12
 273              		.cfi_offset 4, -12
 274              		.cfi_offset 5, -8
 275              		.cfi_offset 14, -4
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 12


 276 0002 83B0     		sub	sp, sp, #12
 277              	.LCFI4:
 278              		.cfi_def_cfa_offset 24
 279 0004 0190     		str	r0, [sp, #4]
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 280              		.loc 1 346 0
 281 0006 FFF7FEFF 		bl	HAL_GetTick
 282              	.LVL10:
 283 000a 0546     		mov	r5, r0
 284              	.LVL11:
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   uint32_t wait = Delay;
 285              		.loc 1 347 0
 286 000c 019C     		ldr	r4, [sp, #4]
 287              	.LVL12:
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Add a period to guarantee minimum wait */
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   if (wait < HAL_MAX_DELAY)
 288              		.loc 1 350 0
 289 000e B4F1FF3F 		cmp	r4, #-1
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   {
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****      wait++;
 290              		.loc 1 352 0
 291 0012 18BF     		it	ne
 292 0014 0134     		addne	r4, r4, #1
 293              	.LVL13:
 294              	.L21:
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   }
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   while((HAL_GetTick() - tickstart) < wait)
 295              		.loc 1 355 0 discriminator 1
 296 0016 FFF7FEFF 		bl	HAL_GetTick
 297              	.LVL14:
 298 001a 401B     		subs	r0, r0, r5
 299 001c A042     		cmp	r0, r4
 300 001e FAD3     		bcc	.L21
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   {
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   }
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 301              		.loc 1 358 0
 302 0020 03B0     		add	sp, sp, #12
 303              		@ sp needed
 304 0022 30BD     		pop	{r4, r5, pc}
 305              		.cfi_endproc
 306              	.LFE130:
 308              		.section	.text.HAL_SuspendTick,"ax",%progbits
 309              		.align	2
 310              		.weak	HAL_SuspendTick
 311              		.thumb
 312              		.thumb_func
 314              	HAL_SuspendTick:
 315              	.LFB131:
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Suspend Tick increment.
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is called, the SysTick interrupt will be disabled and so Tick increment 
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 13


 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is suspended.
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_SuspendTick(void)
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 316              		.loc 1 371 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              		@ link register save eliminated.
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Disable SysTick Interrupt */
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 321              		.loc 1 373 0
 322 0000 024B     		ldr	r3, .L24
 323 0002 1A68     		ldr	r2, [r3]
 324 0004 22F00202 		bic	r2, r2, #2
 325 0008 1A60     		str	r2, [r3]
 326 000a 7047     		bx	lr
 327              	.L25:
 328              		.align	2
 329              	.L24:
 330 000c 10E000E0 		.word	-536813552
 331              		.cfi_endproc
 332              	.LFE131:
 334              		.section	.text.HAL_ResumeTick,"ax",%progbits
 335              		.align	2
 336              		.weak	HAL_ResumeTick
 337              		.thumb
 338              		.thumb_func
 340              	HAL_ResumeTick:
 341              	.LFB132:
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Resume Tick increment.
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is called, the SysTick interrupt will be enabled and so Tick increment 
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       is resumed.
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *       implementations in user file.
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** __weak void HAL_ResumeTick(void)
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 342              		.loc 1 387 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   /* Enable SysTick Interrupt */
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 347              		.loc 1 389 0
 348 0000 024B     		ldr	r3, .L27
 349 0002 1A68     		ldr	r2, [r3]
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 14


 350 0004 42F00202 		orr	r2, r2, #2
 351 0008 1A60     		str	r2, [r3]
 352 000a 7047     		bx	lr
 353              	.L28:
 354              		.align	2
 355              	.L27:
 356 000c 10E000E0 		.word	-536813552
 357              		.cfi_endproc
 358              	.LFE132:
 360              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 361              		.align	2
 362              		.global	HAL_GetHalVersion
 363              		.thumb
 364              		.thumb_func
 366              	HAL_GetHalVersion:
 367              	.LFB133:
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Returns the HAL revision
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 368              		.loc 1 397 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****  return __STM32F4xx_HAL_VERSION;
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 373              		.loc 1 399 0
 374 0000 0048     		ldr	r0, .L30
 375 0002 7047     		bx	lr
 376              	.L31:
 377              		.align	2
 378              	.L30:
 379 0004 00010701 		.word	17236224
 380              		.cfi_endproc
 381              	.LFE133:
 383              		.section	.text.HAL_GetREVID,"ax",%progbits
 384              		.align	2
 385              		.global	HAL_GetREVID
 386              		.thumb
 387              		.thumb_func
 389              	HAL_GetREVID:
 390              	.LFB134:
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Returns the device revision identifier.
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval Device revision identifier
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** uint32_t HAL_GetREVID(void)
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 391              		.loc 1 406 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 15


 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    return((DBGMCU->IDCODE) >> 16U);
 396              		.loc 1 407 0
 397 0000 014B     		ldr	r3, .L33
 398 0002 1868     		ldr	r0, [r3]
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 399              		.loc 1 408 0
 400 0004 000C     		lsrs	r0, r0, #16
 401 0006 7047     		bx	lr
 402              	.L34:
 403              		.align	2
 404              	.L33:
 405 0008 002004E0 		.word	-536600576
 406              		.cfi_endproc
 407              	.LFE134:
 409              		.section	.text.HAL_GetDEVID,"ax",%progbits
 410              		.align	2
 411              		.global	HAL_GetDEVID
 412              		.thumb
 413              		.thumb_func
 415              	HAL_GetDEVID:
 416              	.LFB135:
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Returns the device identifier.
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval Device identifier
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** uint32_t HAL_GetDEVID(void)
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 417              		.loc 1 415 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 422              		.loc 1 416 0
 423 0000 024B     		ldr	r3, .L36
 424 0002 1868     		ldr	r0, [r3]
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 425              		.loc 1 417 0
 426 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 427 0008 7047     		bx	lr
 428              	.L37:
 429 000a 00BF     		.align	2
 430              	.L36:
 431 000c 002004E0 		.word	-536600576
 432              		.cfi_endproc
 433              	.LFE135:
 435              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 436              		.align	2
 437              		.global	HAL_DBGMCU_EnableDBGSleepMode
 438              		.thumb
 439              		.thumb_func
 441              	HAL_DBGMCU_EnableDBGSleepMode:
 442              	.LFB136:
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 16


 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 443              		.loc 1 424 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 448              		.loc 1 425 0
 449 0000 024B     		ldr	r3, .L39
 450 0002 5A68     		ldr	r2, [r3, #4]
 451 0004 42F00102 		orr	r2, r2, #1
 452 0008 5A60     		str	r2, [r3, #4]
 453 000a 7047     		bx	lr
 454              	.L40:
 455              		.align	2
 456              	.L39:
 457 000c 002004E0 		.word	-536600576
 458              		.cfi_endproc
 459              	.LFE136:
 461              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 462              		.align	2
 463              		.global	HAL_DBGMCU_DisableDBGSleepMode
 464              		.thumb
 465              		.thumb_func
 467              	HAL_DBGMCU_DisableDBGSleepMode:
 468              	.LFB137:
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 469              		.loc 1 433 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 474              		.loc 1 434 0
 475 0000 024B     		ldr	r3, .L42
 476 0002 5A68     		ldr	r2, [r3, #4]
 477 0004 22F00102 		bic	r2, r2, #1
 478 0008 5A60     		str	r2, [r3, #4]
 479 000a 7047     		bx	lr
 480              	.L43:
 481              		.align	2
 482              	.L42:
 483 000c 002004E0 		.word	-536600576
 484              		.cfi_endproc
 485              	.LFE137:
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 17


 487              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 488              		.align	2
 489              		.global	HAL_DBGMCU_EnableDBGStopMode
 490              		.thumb
 491              		.thumb_func
 493              	HAL_DBGMCU_EnableDBGStopMode:
 494              	.LFB138:
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 495              		.loc 1 442 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 500              		.loc 1 443 0
 501 0000 024B     		ldr	r3, .L45
 502 0002 5A68     		ldr	r2, [r3, #4]
 503 0004 42F00202 		orr	r2, r2, #2
 504 0008 5A60     		str	r2, [r3, #4]
 505 000a 7047     		bx	lr
 506              	.L46:
 507              		.align	2
 508              	.L45:
 509 000c 002004E0 		.word	-536600576
 510              		.cfi_endproc
 511              	.LFE138:
 513              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 514              		.align	2
 515              		.global	HAL_DBGMCU_DisableDBGStopMode
 516              		.thumb
 517              		.thumb_func
 519              	HAL_DBGMCU_DisableDBGStopMode:
 520              	.LFB139:
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 521              		.loc 1 451 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 526              		.loc 1 452 0
 527 0000 024B     		ldr	r3, .L48
 528 0002 5A68     		ldr	r2, [r3, #4]
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 18


 529 0004 22F00202 		bic	r2, r2, #2
 530 0008 5A60     		str	r2, [r3, #4]
 531 000a 7047     		bx	lr
 532              	.L49:
 533              		.align	2
 534              	.L48:
 535 000c 002004E0 		.word	-536600576
 536              		.cfi_endproc
 537              	.LFE139:
 539              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 540              		.align	2
 541              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 542              		.thumb
 543              		.thumb_func
 545              	HAL_DBGMCU_EnableDBGStandbyMode:
 546              	.LFB140:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 547              		.loc 1 460 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 552              		.loc 1 461 0
 553 0000 024B     		ldr	r3, .L51
 554 0002 5A68     		ldr	r2, [r3, #4]
 555 0004 42F00402 		orr	r2, r2, #4
 556 0008 5A60     		str	r2, [r3, #4]
 557 000a 7047     		bx	lr
 558              	.L52:
 559              		.align	2
 560              	.L51:
 561 000c 002004E0 		.word	-536600576
 562              		.cfi_endproc
 563              	.LFE140:
 565              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 566              		.align	2
 567              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 568              		.thumb
 569              		.thumb_func
 571              	HAL_DBGMCU_DisableDBGStandbyMode:
 572              	.LFB141:
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 19


 573              		.loc 1 469 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 0
 576              		@ frame_needed = 0, uses_anonymous_args = 0
 577              		@ link register save eliminated.
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 578              		.loc 1 470 0
 579 0000 024B     		ldr	r3, .L54
 580 0002 5A68     		ldr	r2, [r3, #4]
 581 0004 22F00402 		bic	r2, r2, #4
 582 0008 5A60     		str	r2, [r3, #4]
 583 000a 7047     		bx	lr
 584              	.L55:
 585              		.align	2
 586              	.L54:
 587 000c 002004E0 		.word	-536600576
 588              		.cfi_endproc
 589              	.LFE141:
 591              		.section	.text.HAL_EnableCompensationCell,"ax",%progbits
 592              		.align	2
 593              		.global	HAL_EnableCompensationCell
 594              		.thumb
 595              		.thumb_func
 597              	HAL_EnableCompensationCell:
 598              	.LFB142:
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Enables the I/O Compensation Cell.
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_EnableCompensationCell(void)
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 599              		.loc 1 480 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL15:
 605              	.LBB6:
 606              	.LBB7:
 607              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 20


  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 21


  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 22


 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 23


 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 24


 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 25


 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 26


 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 27


 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 28


 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 29


 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 608              		.loc 2 531 0
 609 0000 0122     		movs	r2, #1
 610              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 611 0002 92FAA2F2 		rbit r2, r2
 612              	@ 0 "" 2
 613              	.LVL16:
 614              		.thumb
 615              	.LBE7:
 616              	.LBE6:
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 617              		.loc 1 481 0
 618 0006 B2FA82F2 		clz	r2, r2
 619              	.LVL17:
 620 000a 034B     		ldr	r3, .L57
 621 000c 1344     		add	r3, r3, r2
 622 000e 9B00     		lsls	r3, r3, #2
 623 0010 0122     		movs	r2, #1
 624 0012 1A60     		str	r2, [r3]
 625 0014 7047     		bx	lr
 626              	.L58:
 627 0016 00BF     		.align	2
 628              	.L57:
 629 0018 00C18910 		.word	277463296
 630              		.cfi_endproc
 631              	.LFE142:
 633              		.section	.text.HAL_DisableCompensationCell,"ax",%progbits
 634              		.align	2
 635              		.global	HAL_DisableCompensationCell
 636              		.thumb
 637              		.thumb_func
 639              	HAL_DisableCompensationCell:
 640              	.LFB143:
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief  Power-down the I/O Compensation Cell.
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval None
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_DisableCompensationCell(void)
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 641              		.loc 1 491 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              	.LVL18:
 647              	.LBB8:
 648              	.LBB9:
 649              		.loc 2 531 0
 650 0000 0122     		movs	r2, #1
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 30


 651              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 652 0002 92FAA2F2 		rbit r2, r2
 653              	@ 0 "" 2
 654              	.LVL19:
 655              		.thumb
 656              	.LBE9:
 657              	.LBE8:
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 658              		.loc 1 492 0
 659 0006 B2FA82F2 		clz	r2, r2
 660              	.LVL20:
 661 000a 034B     		ldr	r3, .L60
 662 000c 1344     		add	r3, r3, r2
 663 000e 9B00     		lsls	r3, r3, #2
 664 0010 0022     		movs	r2, #0
 665 0012 1A60     		str	r2, [r3]
 666 0014 7047     		bx	lr
 667              	.L61:
 668 0016 00BF     		.align	2
 669              	.L60:
 670 0018 00C18910 		.word	277463296
 671              		.cfi_endproc
 672              	.LFE143:
 674              		.section	.text.HAL_GetUID,"ax",%progbits
 675              		.align	2
 676              		.global	HAL_GetUID
 677              		.thumb
 678              		.thumb_func
 680              	HAL_GetUID:
 681              	.LFB144:
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** }
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** 
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** /**
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @brief Return the unique device identifier (UID based on 96 bits)
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @param UID: pointer to 3 words array.
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   * @retval Device identifier
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   */
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** void HAL_GetUID(uint32_t *UID)
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c **** {
 682              		.loc 1 501 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 687              	.LVL21:
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 688              		.loc 1 502 0
 689 0000 044B     		ldr	r3, .L63
 690 0002 1B68     		ldr	r3, [r3]
 691 0004 0360     		str	r3, [r0]
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 692              		.loc 1 503 0
 693 0006 044B     		ldr	r3, .L63+4
 694 0008 1B68     		ldr	r3, [r3]
 695 000a 4360     		str	r3, [r0, #4]
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c ****   UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 696              		.loc 1 504 0
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 31


 697 000c 034B     		ldr	r3, .L63+8
 698 000e 1B68     		ldr	r3, [r3]
 699 0010 8360     		str	r3, [r0, #8]
 700 0012 7047     		bx	lr
 701              	.L64:
 702              		.align	2
 703              	.L63:
 704 0014 107AFF1F 		.word	536836624
 705 0018 147AFF1F 		.word	536836628
 706 001c 187AFF1F 		.word	536836632
 707              		.cfi_endproc
 708              	.LFE144:
 710              		.comm	uwTick,4,4
 711              		.text
 712              	.Letext0:
 713              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 714              		.file 4 "/Users/tattaka/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/stdint.h"
 715              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 716              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 717              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 718              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 719              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal.c
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:21     .text.HAL_MspInit:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:26     .text.HAL_MspInit:0000000000000000 HAL_MspInit
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:39     .text.HAL_MspDeInit:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:44     .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:56     .text.HAL_DeInit:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:61     .text.HAL_DeInit:0000000000000000 HAL_DeInit
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:105    .text.HAL_DeInit:0000000000000028 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:110    .text.HAL_InitTick:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:115    .text.HAL_InitTick:0000000000000000 HAL_InitTick
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:150    .text.HAL_InitTick:0000000000000024 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:156    .text.HAL_Init:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:161    .text.HAL_Init:0000000000000000 HAL_Init
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:202    .text.HAL_Init:0000000000000030 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:207    .text.HAL_IncTick:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:212    .text.HAL_IncTick:0000000000000000 HAL_IncTick
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:228    .text.HAL_IncTick:000000000000000c $d
                            *COM*:0000000000000004 uwTick
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:233    .text.HAL_GetTick:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:238    .text.HAL_GetTick:0000000000000000 HAL_GetTick
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:253    .text.HAL_GetTick:0000000000000008 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:258    .text.HAL_Delay:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:263    .text.HAL_Delay:0000000000000000 HAL_Delay
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:309    .text.HAL_SuspendTick:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:314    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:330    .text.HAL_SuspendTick:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:335    .text.HAL_ResumeTick:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:340    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:356    .text.HAL_ResumeTick:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:361    .text.HAL_GetHalVersion:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:366    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:379    .text.HAL_GetHalVersion:0000000000000004 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:384    .text.HAL_GetREVID:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:389    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:405    .text.HAL_GetREVID:0000000000000008 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:410    .text.HAL_GetDEVID:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:415    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:431    .text.HAL_GetDEVID:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:436    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:441    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 HAL_DBGMCU_EnableDBGSleepMode
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:457    .text.HAL_DBGMCU_EnableDBGSleepMode:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:462    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:467    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 HAL_DBGMCU_DisableDBGSleepMode
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:483    .text.HAL_DBGMCU_DisableDBGSleepMode:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:488    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:493    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:509    .text.HAL_DBGMCU_EnableDBGStopMode:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:514    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:519    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:535    .text.HAL_DBGMCU_DisableDBGStopMode:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:540    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:545    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:561    .text.HAL_DBGMCU_EnableDBGStandbyMode:000000000000000c $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:566    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:571    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:587    .text.HAL_DBGMCU_DisableDBGStandbyMode:000000000000000c $d
ARM GAS  /var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s 			page 33


/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:592    .text.HAL_EnableCompensationCell:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:597    .text.HAL_EnableCompensationCell:0000000000000000 HAL_EnableCompensationCell
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:629    .text.HAL_EnableCompensationCell:0000000000000018 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:634    .text.HAL_DisableCompensationCell:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:639    .text.HAL_DisableCompensationCell:0000000000000000 HAL_DisableCompensationCell
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:670    .text.HAL_DisableCompensationCell:0000000000000018 $d
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:675    .text.HAL_GetUID:0000000000000000 $t
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:680    .text.HAL_GetUID:0000000000000000 HAL_GetUID
/var/folders/m5/1z2v3_dd2cg5xnclvhns6x640000gn/T//cc4mBWsa.s:704    .text.HAL_GetUID:0000000000000014 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
SystemCoreClock
HAL_NVIC_SetPriorityGrouping
